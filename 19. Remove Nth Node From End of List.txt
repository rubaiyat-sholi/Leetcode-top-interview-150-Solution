class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0, head)
        first = dummy
        second = dummy
        
        for _ in range(n + 1):
            first = first.next
            
        while first is not None:
            first = first.next
            second = second.next

        second.next = second.next.next
        
        return dummy.next

def list_to_linkedlist(items):
    dummy_head = ListNode(0)
    current = dummy_head
    for item in items:
        current.next = ListNode(item)
        current = current.next
    return dummy_head.next

def linkedlist_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

head = list_to_linkedlist([1, 2, 3, 4, 5])
n = 2

solution = Solution()
result = solution.removeNthFromEnd(head, n)

print(linkedlist_to_list(result))  # Expected output: [1, 2, 3, 5]