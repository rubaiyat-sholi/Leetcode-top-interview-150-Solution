from collections import deque

class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return None

        queue = deque([root])
        
        while queue:
            size = len(queue)
            prev = None 
            
            for i in range(size):
                node = queue.popleft()
                
                if prev:
                    prev.next = node
                prev = node
 
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            prev.next = None
        
        return root

    def serializeWithNext(self, root: 'Node') -> list:
        """ Serializes the tree level-by-level using next pointers """
        if not root:
            return []
        
        result = []
        current = root

        while current:
            level_start = current
            while current:
                result.append(current.val)
                current = current.next
            result.append('#')
            current = level_start.left or level_start.right
            
        return result     