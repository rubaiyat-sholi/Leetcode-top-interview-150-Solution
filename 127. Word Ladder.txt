from collections import deque, defaultdict

class Solution:
    def ladderLength(self, beginWord, endWord, wordList):
        if endWord not in wordList:
            return 0

        wordList = set(wordList) 
        pattern_map = defaultdict(list)
        
        for word in wordList:
            for i in range(len(word)):
                pattern = word[:i] + "*" + word[i + 1:]
                pattern_map[pattern].append(word)

        queue = deque([(beginWord, 1)]) 
        visited = set([beginWord])
        
        while queue:
            current_word, steps = queue.popleft() 
            for i in range(len(current_word)):
                pattern = current_word[:i] + "*" + current_word[i + 1:]
                for neighbor in pattern_map[pattern]:
                    if neighbor == endWord:
                        return steps + 1
                    if neighbor not in visited:
                        visited.add(neighbor)
                        queue.append((neighbor, steps + 1))
                pattern_map[pattern] = []
        
        return 0
        